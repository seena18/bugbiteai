# -*- coding: utf-8 -*-
"""480-F22 Bug Byte Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mqotZ7TJqokfkouSUv_OkVYyemfB6QFr

# Title: CSC 480-F22 Jupyter Notebook Template

# Authors:

***Seena Abed, Cameron McGiffert, Ritvik Seshadri*** 

California Polytechnic State University, San Luis Obispo
CSC480 Fall 2022

## Project Description

This project categorizes bug bites based on an image of the bite. This is helpful for people who have bitten but don't recognize what kind of bug it came from. While most bug bites are relatively harmless, they can still potentially be fatal, and our system can help increase likelihood of survival by identifying the type of bite more quickly.

# Copyright: Apache 2.0 License

```
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

```

## Colab and Jupyter Notebooks

A Colab consists of a Jupyter notebook that is set up in the cloud. Jupyter notebooks (and thus Colabs) are composed of text cells (like this one) and code cells. An example of a code cell is below; it is marked by two square brackets '[ ]', which turn into an arrow when you move the cursor over them. Clicking on the arrow "runs" the cell: the code contained in the cell is executed. If the code produces an output, it is displayed underneath. There may be a number enclosed between the two brackets. This indicates that the code has been run multiple times.

## Google Account
You need to have a Google account that lets you store files on GDrive. If you have a Gmail account, you should be able to go to [Google Drive](https://drive.google.com/) and log in with your Gmail login and password.

## Create Your Copy
If you want to use and modify a lab, you need to save a copy. To do so, go to the 'File' menu, select 'Save a copy in Drive' and change the name (it begins with 'Copy of ...'). You can share Colab notebooks with others, similar to sharing a document on Google Drive.

## Set Up a Colab
Colabs run in the cloud through your Web browser. There's no need to install software on your computer. A Colab may require other software (libraries) to run, but this is done in the Colab itself, usually at the beginning.

# Overview

This tutorial will show how to use **Roboflow** and **YOLOv5** to classify images.

YOLOv5 is the fifth iteration of YOLO (short for You Only Look Once), a machine learning algorithm used for object detection in photos and videos.  

YOLO runs on PyTorch, a framework developed by Meta (formerly Facebook), as an extension to the open-source Torch library. Torch and PyTorch were both designed for machine learning and contain many algorithms to make these processes easier to implement.  

Object detection algorithms need a dataset of training photos. The objects we want to be identified need to be clearly annotated in each photo. To accomplish this, weâ€™re using Roboflow, a free online annotation tool. Images annotated in Roboflow can be exported for direct use with YOLOv5.  

We're first going to import a photoset from Roboflow. This assumes that photos have already been annotated. If this hasn't been completed, go to Roboflow's website and follow their guide on annotating photos, and then export them for use with YOLOv5. We also include these steps in less detail in the *Data Set* section below.

Using these annotated photos, we'll then train a YOLOv5 classification model. Finally, we'll validate the custom model.

##Learning Objectives

- Learn how to import images from Roboflow
- Learn how to train a YOLOv5 classification model
- Learn how to validate custom model

# Setup

We'll first pull YOLOv5 and all necessary classification libraries.
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5  # clone
# %cd yolov5
# %pip install -qr requirements.txt  # install

import torch
import utils
display = utils.notebook_init()  # checks
!git clone https://github.com/DarvinX/trash_classifier.git

"""# Data Set

With all requirements pulled, we'll now import our photoset data from Roboflow.

Note: To import any dataset from Roboflow:

1. Click on "export" on any dataset on roboflow
2. Export as folder structure
3. A chunk of code like the following will be produced
  - You can either use this current roboflow dataset of bugbite images or replace it with any other roboflow dataset
"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="uM1ttr0IhxTTi37lvExZ")
project = rf.workspace("bug-bite").project("bug-bite-single")
dataset = project.version(19).download("folder")

"""# Model

We will download some pretrained model weights so that we don't have to start from scratch. 

Weights are parameter within the model that transform input data. Due to the model's structure, these weights are hidden from us, and it's difficult to represent them in a meaningful way for humans.

These weights will be modified as the model is trained in the next section.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ../yolov5
from utils.downloads import attempt_download

p5 = ['n', 's', 'm', 'l', 'x']  # P5 models
cls = [f'{x}-cls' for x in p5]  # classification models

for x in cls:
    attempt_download(f'weights/yolov5{x}.pt')

"""## Model Training

The following line of code will train a model using our dataset of annotated images from Roboflow. To adjust the number of epochs, or, complete cycles of the training data that the model will make, adjust `200` in the command `-- epochs 200` to a new value.
"""

!python classify/train.py --model yolov5n-cls.pt --data {dataset.location} --epochs 200 --batch 100 --img 224 --pretrained weights/yolov5s-cls.pt

"""## Model Validation

The following line of code will validate our model with the dedicated validation images in our roboflow dataset.

How to read the output:
* The `Class` column refers to which type of bug bite image was evaluated.
* The `Images` column refers to how many images of that class were present in the testing dataset.
* The `top1_acc` column refers to the percentage of images in that row's class that were correctly identified.
* The `top5_acc` column can be disregarded.
"""

!python classify/val.py --weights runs/train-cls/exp/weights/best.pt --data {dataset.location}

"""# Viewing a test image

Run the following cell.  
A random image from our database will be selected and evaluated.  
The final line of output will read  `Results saved to runs/...` where `...` refers to the rest of the path.  
Navigate to that directory in Google Colab, and you will find the evaluation of that photo.
"""

!ls runs/val-cls/exp
import os

#Get the path of an image from the test or validation set
if os.path.exists(os.path.join(dataset.location, "test")):
  split_path = os.path.join(dataset.location, "test")
else:
  split_path = os.path.join(dataset.location, "val")

# Bug class of a directory to use as an example
example_class = os.listdir(split_path)[0] 

# Get name of an example image from the image class directory
example_image_name = os.listdir(os.path.join(split_path, example_class))[0]

# Get path of example image from directory
example_image_path = os.path.join(split_path, example_class, example_image_name)

os.environ["TEST_IMAGE_PATH"] = example_image_path

print(f"Inferring on an example of the class '{example_class}'")

!python classify/predict.py --weights runs/train-cls/exp/weights/best.pt --source "${TEST_IMAGE_PATH}"

"""# Conclusions

Image classification is extremely easy when we have tools like YOLOv5 and Roboflow. With a few lines of code we were able to create a model and validate its performance on images that it had not yet encountered

# Future Work

Going forward we would like to add to our bug bite detection model by adding more images and fine tuning the prediction parameters as well as the ratio of train/validation/test images for each class.

# References

Guerrie, P. (2022, September 12). How to train yolov5-classification on a custom dataset. Roboflow Blog. Retrieved October 30, 2022, from https://blog.roboflow.com/train-yolov5-classification-custom-data/

# Acknowledgements

If you're using code, data sets, examples, images or other material based on other people's work, acknowledge it here. For images and similar material, you should also include a reference anchor or a link to the original.
"""